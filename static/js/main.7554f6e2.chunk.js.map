{"version":3,"sources":["logo.svg","context/PublicOrderData.js","components/Newsfeed.jsx","components/Nav.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","orderReportArray","title","location","description","Newsfeed","ordersArray","className","Accordion","Card","Toggle","as","Header","eventKey","Collapse","Body","map","report","Nav","Navbar","bg","variant","Brand","href","Home","Alert","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,oKCcrCC,EAAmB,CAdJ,CACnBC,MAAO,yDACPC,SAAU,yBACVC,YACE,i+CAGiB,CACnBF,MAAO,0CACPC,SAAU,iCACVC,YACE,+cCPW,SAASC,IACtB,IAAMC,EDYCL,ECVP,OACE,yBAAKM,UAAU,YACb,gDACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,KAC1C,8DAEF,kBAACL,EAAA,EAAUM,SAAX,CAAoBD,SAAS,KAC3B,kBAACJ,EAAA,EAAKM,KAAN,KACGT,EAAYU,KAAI,SAACC,GAAD,OACf,oCACE,yBAAKV,UAAU,eACb,4BAAKU,EAAOf,OACZ,4BAAKe,EAAOd,UACZ,6BACA,yBAAKI,UAAU,eACb,2BAAIU,EAAOb,wB,YCtBlB,SAASc,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,mBACA,kBAACJ,EAAA,EAAOT,OAAR,OCDS,SAASc,IACtB,OACE,oCACE,kBAACN,EAAD,MACA,8BACE,kBAACO,EAAA,EAAD,CAAOJ,QAAQ,QAAf,mFAIA,kBAAChB,EAAD,QCKOqB,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,IAAIC,OAAK,EAACC,UAAWL,QCAvBM,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7554f6e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const orderReport1 = {\r\n  title: \"Bonian King murders Duke of Ankara at Royal Tournament\",\r\n  location: \"Ebensee, Bolton, Bonia\",\r\n  description:\r\n    \"After fantastic events of the Royal Tournament at the Bonian Capital of Ebensee, King William I of Bonia performed a historical closing ceremony. Stepping forward and addressing the large,international crowd, the King asked for a representative of Ankara to join him. The King entered into a speach remarking on the disjointed history of the two countries since their seperation 60 years previous. King William spoke to Duke Micheal Irvine, extending an olive branch and asking whether it was time for the reunification of the country. Duke Irvine politley declined stating that a unified Bonia will never happen as long as the King styles himself as the authority of the church. Witnesses reported there was a second of movement from the King and then an explosion of blinding, white light. After several seconds, the audience regained sight and witnessed a starting sight. Where the Ankaran Duke had been, was merely a pile of ash and the King was seemingly draped in divine energy. Some audience members began to run in terror but others were shocked into silence. King William with hair reportivly draped in golden light, issued another speach. He spoke of a coming time of attonement, benediction, and unification with the Chosen. International representatives were quickly and safetly escorted from the event. Ankara has issued a formal denoucenemt of the King's action saying 'If unification was possible before, will never be now. The debt of Irvine's execution will be payed in Bonian blood!'\",\r\n};\r\n\r\nconst orderReport2 = {\r\n  title: \"Legendary Mercanary Company Heads North\",\r\n  location: \"Sjorn's Crossing, Drake, Bonia\",\r\n  description:\r\n    \"The legendary mercanary companies the Iron Gauntlet arrived in the Bolton Barony of Drake today. The Iron Guantlet is renown for their size and campaigns venturing past the Three Muses, into Faulm territory. The company spent the last month recruiting from surrounding provinces. This will be the Iron Gauntlet's seventh campaign into Faulm and the second under it's current commander. When asked about the odds, the commander merely said 'I am optimistic'. \",\r\n};\r\n\r\nconst orderReportArray = [orderReport1, orderReport2];\r\n\r\nexport function get_orders() {\r\n  return orderReportArray;\r\n}\r\n","import React from \"react\";\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { get_orders } from \"../context/PublicOrderData\";\r\nexport default function Newsfeed() {\r\n  const ordersArray = get_orders();\r\n\r\n  return (\r\n    <div className=\"newsfeed\">\r\n      <h2>Global News Feed</h2>\r\n      <Accordion>\r\n        <Card>\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n            <b>First Phase of Summer, 1998 AE</b>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n              {ordersArray.map((report) => (\r\n                <>\r\n                  <div className=\"newsarticle\">\r\n                    <h3>{report.title}</h3>\r\n                    <h5>{report.location}</h5>\r\n                    <hr />\r\n                    <div className=\"newsdescrip\">\r\n                      <p>{report.description}</p>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              ))}\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nexport default function Nav() {\r\n  return (\r\n    <Navbar bg=\"primary\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">Barony Campaign</Navbar.Brand>\r\n      <Navbar.Toggle />\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Accordion, Card, Alert } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Newsfeed from \"../components/Newsfeed\";\r\nimport Nav from \"../components/Nav\";\r\nexport default function Home() {\r\n  return (\r\n    <>\r\n      <Nav />\r\n      <body>\r\n        <Alert variant=\"info\">\r\n          In the News Feed, you can find reports of all events that are public\r\n          knowledge!\r\n        </Alert>\r\n        <Newsfeed />\r\n      </body>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./styles/css/App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home.jsx\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}